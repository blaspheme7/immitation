package dao;

import java.util.HashMap;
import java.util.Hashtable;
import java.util.List;

import javax.sql.DataSource;

import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;

import annotation.Component;
import dao.BoardDao;
import vo.Writing;

@Component("BoardDao")
public class MySqlBoardDao implements BoardDao {
	
	SqlSessionFactory sqlSessionFactory;
	
	public void setSqlSessionFactory(SqlSessionFactory sqlSessionFactory) {
		this.sqlSessionFactory=sqlSessionFactory;
	}

	DataSource ds;
	
	public void setDataSource(DataSource ds) {
	    this.ds = ds;
	}
	
	public List<Writing> selectList(HashMap<String,Object> paramMap) throws Exception {
		
		SqlSession sqlSession=sqlSessionFactory.openSession();
			    
	    try {
	    	return sqlSession.selectList("dao.BoardDao.selectList",paramMap);
	    } finally {
	    	sqlSession.close();
	    }
	  }

	public int insert(Writing writing) throws Exception {
	    SqlSession sqlSession=sqlSessionFactory.openSession();
	    try {
	    	int count=sqlSession.insert("dao.BoardDao.insert", writing);
	    	sqlSession.commit();
	    	return count;
	    } finally {
	    	sqlSession.close();
	    }
	}

	@Override
	public int update(Writing writing) throws Exception { 
		SqlSession sqlSession=sqlSessionFactory.openSession();
		
	    try {
	    	
	    	Project original=sqlSession.selectOne("spms.dao.ProjectDao.selectOne",project.getNo());
	    	
	    	Hashtable<String,Object> paramMap=new Hashtable<String,Object>();
	    	if(!project.getTitle().equals(original.getTitle()))
	    		paramMap.put("title", project.getTitle());
	    	if(!project.getContent().equals(original.getContent()))
	    		paramMap.put("content", project.getContent());
	    	if(project.getStartDate().compareTo(original.getStartDate())!=0)
	    		paramMap.put("startDate", project.getStartDate());
	    	if(project.getEndDate().compareTo(original.getEndDate())!=0)
	    		paramMap.put("startDate", project.getEndDate());
	    	if(project.getState()!=original.getState())
	    		paramMap.put("state", project.getState());
	    	if(!project.getTags().equals(original.getTags()))
	    		paramMap.put("tags", project.getTags());
	    	
	    	if(paramMap.size()>0) {
	    		
	    		paramMap.put("no", project.getNo());
	    		int count=sqlSession.update("spms.dao.ProjectDao.update", paramMap);
	    		sqlSession.commit();
	    		return count;
	    		
	    	} else { return 0; }
	    } finally {
	    	sqlSession.close();
	    }
	  }
	
	
	@SuppressWarnings("null")
	@Override
	public Project selectOne(int no) throws Exception {
		SqlSession sqlSession=sqlSessionFactory.openSession();
		
		try {
			return sqlSession.selectOne("spms.dao.ProjectDao.selectOne", no); 
		} finally {
			sqlSession.close();
		}
	}
	
	public int delete(int no) throws Exception {
		SqlSession sqlSession=sqlSessionFactory.openSession();
		try {
			int count=sqlSession.delete("spms.dao.ProjectDao.delete", no);
			sqlSession.commit();
			return count;
		} finally {
			sqlSession.close();
		}
	}
}

